:mod:`pya.arecorder`
====================

.. py:module:: pya.arecorder


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pya.arecorder.Arecorder



.. data:: _LOGGER
   

   

.. py:class:: Arecorder(sr=44100, bs=256, device=None, channels=None, backend=None, **kwargs)

   Bases: :class:`pya.Aserver`

   pya audio recorder Based on pyaudio, uses callbacks to save audio data
   for pyaudio signals into ASigs

   Examples:
   -----------
   >>> from pya import Arecorder
   >>> import time
   >>> ar = Arecorder().boot()
   >>> ar.record()
   >>> time.sleep(1)
   >>> ar.stop()
   >>> print(ar.recordings)  # doctest:+ELLIPSIS
   [Asig(''): ... x ... @ 44100Hz = ...

   .. method:: device(self)
      :property:



   .. method:: set_tracks(self, tracks, gains)


      Define the number of track to be recorded and their gains.

      :param tracks: A list of input channel indices. By default None (record all channels)
      :type tracks: list or numpy.ndarray
      :param gains: A list of gains in decibel. Needs to be same length as tracks.
      :type gains: list of numpy.ndarray


   .. method:: reset(self)



   .. method:: boot(self)


      boot recorder


   .. method:: _recorder_callback(self, in_data, frame_count, time_info, flag)


      Callback function during streaming.


   .. method:: record(self)


      Activate recording


   .. method:: pause(self)


      Pause the recording, but the record_buffer remains


   .. method:: stop(self)


      Stop recording, then stores the data from record_buffer into recordings


   .. method:: __repr__(self)


      Return repr(self).



